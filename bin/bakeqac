#!/usr/bin/env ruby

require 'fileutils'

$:.unshift(File.dirname(__FILE__)+"/../lib")

require "bakeqac/options/options"
require 'bake/toolchain/colorizing_formatter'
require 'bake/options/options'
require 'common/process'
require 'common/utils'

module Bake

###### PREREQUISITE 1: BAKEQAC OPTIONS ######

  @options = BakeqacOptions.new(ARGV)
  bakeOptions = Options.new([])
  @options.parse_options(bakeOptions)

  success = false
  consoleOutput = ""
  licenseError = false

###### PREREQUISITE 2: BAKE OPTIONS ######

  passedParams = []
  excludeParam = false
  wasMinus = false
  ARGV.each do |x|
    if ["--c++11", "--c++14", "--cct", "--rcf", "--acf", "--qacdata", "--qacstep", "--qacfilter", "--qacnoformat", "--qacunittest", "--qacretry"].include?x
      excludeParam = true
      next
    end
    if excludeParam
      excludeParam = false
      next
    end
    passedParams << x
  end
  passedParams << "--rebuild" unless passedParams.include?"--rebuild"
  passedParams << "--compile-only" if (passedParams & ["--compile-only", "--compile_only", "-f"]).empty?
  passedParams << "--filter-paths" unless passedParams.include?"--filter-paths"

  success = true

###### PREREQUISITE 3: QACLI LOCATION ######

qaExe = [@options.qac_home+"/common/bin/qacli"]
if @options.qacunittest
  qaExe = ["ruby", File.dirname(__FILE__)+"/../spec/bin/qactester.rb"]
end

###### STEP 1: CREATE ######

  if (@options.qacstep.nil? or @options.qacstep.include?"admin")

    cmd = qaExe + ["admin", "--qaf-project-config", "--qaf-project", @options.qacdata]
    @options.cct.each {|c| cmd << "--cct" << c }
    cmd << "--rcf" << @options.rcf
    cmd << "--acf" << @options.acf

    puts "bakeqac: creating database..."
    FileUtils.rm_rf @options.qacdata
    success, consoleOutput = ProcessHelper.run(cmd, true)
    puts consoleOutput if !success

  end

###### STEP 2: BUILD ######

  if success and (@options.qacstep.nil? or @options.qacstep.include?"analyze")
    FileUtils::mkdir_p @options.qacdata

    cmd = qaExe + ["analyze", "-P", @options.qacdata, "-b"]

    begin
      devMode = File.exist?"c:/Projekte/git/bake/bin/bake"
    rescue Exception
      devMode = false
    end

    if devMode
      bcmd = "ruby c:/Projekte/git/bake/bin/bake "
    else
      bcmd = (Utils::OS.windows? ? "cmd /c bake.bat " : "bake ")
    end

    bcmd += passedParams.join(" ")
    cmd << bcmd

    puts "bakeqac: building and analyzing files..."

    timeStart = Time.now
    loop do
      success, consoleOutput = ProcessHelper.run(cmd, !@options.qacfilter)
      licenseError = false
      consoleOutput.each_line do |line|
        licenseError = true if (line.include?("License Refused") && !line.include?("License Refused: C:"))
      end
      break unless (@options.qacfilter and licenseError and (@options.qacretry >= (Time.now - timeStart)))
      puts "License refused, retry seconds left: %d" % (@options.qacretry - (Time.now - timeStart))
    end
    puts "License refused, retry timeout over -> failure." if (@options.qacretry > 0 && licenseError && @options.qacfilter)

    success = false # we have to parse the output, qacli returns always an error here...
    filterOutput = []
    filter = []
    endFound = false
    consoleOutput.each_line do |line|
      scan_res = line.scan(/Project path: ([a-zA-Z]{0,1})(:{0,1})(.*)/)
      if scan_res.length > 0
        filter << (scan_res[0][0].downcase + scan_res[0][1] + scan_res[0][2].gsub(/\\/,"/").strip)
      elsif !endFound
        filterOutput << line if @options.qacfilter
        if line.start_with?("Rebuilding ")
         endFound = true
          success = true if line.include?("Rebuilding done") # don't know why the return value is 2 in this case...
        end
      end
    end
    success = false if licenseError

    if @options.qacfilter
      if success
        puts filterOutput
        File.open("#{@options.qacdata}/filter.txt", "w+") do |f|
          f.puts(filter)
        end
      else
        puts consoleOutput
      end
    end

  end


###### STEP 3: RESULT ######

  if success and (@options.qacstep.nil? or @options.qacstep.include?"view")
    FileUtils::mkdir_p @options.qacdata

    puts "bakeqac: printing results..."

    filter = []
    useFilter = File.exist?("#{@options.qacdata}/filter.txt") && @options.qacfilter

    if useFilter
      File.open("#{@options.qacdata}/filter.txt", "r") do |f|
        f.each_line { |line| filter << line.strip }
      end
      filter.delete_if { |f| (f.end_with? "/gtest") or (f.end_with? "/gmock") }
    end

    cmd = qaExe + ["view", "-P", @options.qacdata, "-m", "STDOUT"]
    if not @options.qacnoformat
      cmd += ["-f", "%?u==0%(MSG: %:---- %)%F(%l,%c): (%r:%N)%t%?v%(\n%v%)"]
    end

    timeStart = Time.now
    loop do
      success, consoleOutput = ProcessHelper.run(cmd, !useFilter)
      licenseError = false
      consoleOutput.each_line do |line|
        licenseError = true if (line.include?("License Refused") && !line.include?("License Refused: C:"))
      end
      break unless (useFilter and licenseError and (@options.qacretry >= (Time.now - timeStart)))
      puts "License refused, retry seconds left: %d" % (@options.qacretry - (Time.now - timeStart))
    end
    puts "License refused, retry timeout over -> failure." if (@options.qacretry > 0 && licenseError && useFilter)

    if useFilter
      numberOfMessages = 0
      if success && !licenseError
        foundFile = false
        consoleOutput.each_line do |line|
          line.strip!
          foundFile = false if line.empty? or line.include? " ======= Results for "
          scan_res = line.scan(/\/\/ ======= Results for ([a-zA-Z]{0,1})(:{0,1})(.*)/)
          if scan_res.length > 0
            converted_line = (scan_res[0][0].downcase + scan_res[0][1] + scan_res[0][2].gsub(/\\/,"/"))
            filter.each do |fil|
              if converted_line.include?fil and not converted_line.include?(fil+"/test/") and not converted_line.include?(fil+"/mock/")
                foundFile = true
                break
              end
            end
          end
          if foundFile
            if not line.include?"QAC++ Deep Flow Static Analyser"
              if (!@options.qacnoformat && line.start_with?("MSG: ")) || (@options.qacnoformat && line.include?(": Msg("))
                Bake.formatter.printWarning(line)
                numberOfMessages += 1
              elsif scan_res.length > 0
                Bake.formatter.printAdditionalInfo(line)
              else
                Bake.formatter.printInfo(line)
              end
            end
          end
        end
        Bake.formatter.printSuccess("\n**** Number of messages: #{numberOfMessages} ****")
      else
        puts consoleOutput
      end
    end

  end

###### DONE ######

  exit(success ? 0 : 1)

end


