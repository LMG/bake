Project {

  ExecutableConfig test_dep2 {
    Files "src/main.cpp"
    Dependency lib1, config: test_ok
    Dependency lib2, config: test_ok
    DefaultToolchain GCC
  }

  ExecutableConfig test_dep0 {
    Files "src/main.cpp"
    DefaultToolchain GCC
  }

  ExecutableConfig test_set0 {
    Files "src/main.cpp"
    PreSteps {
      CommandLine "echo vars: $(VAR1)$(VAR2)$(VAR3)-"
    }
    DefaultToolchain GCC
  }

  ExecutableConfig test_set2 {
    Set VAR1, value: "VAR1"
    Set VAR2, value: "VAR2"
    Files "src/main.cpp"
    PreSteps {
      CommandLine "echo vars: $(VAR1)$(VAR2)$(VAR3)-"
    }
    DefaultToolchain GCC
  }

  ExecutableConfig test_art0 {
    Files "src/main.cpp"
    DefaultToolchain GCC
  }

  ExecutableConfig test_art1 {
    Files "src/main.cpp"
    ArtifactName "org.exe"
    DefaultToolchain GCC
  }

  ExecutableConfig test_map0 {
    Files "src/main.cpp"
    DefaultToolchain GCC
  }

  ExecutableConfig test_map1 {
    Files "src/main.cpp"
    MapFile "$(OutputDir)/org.map"
    DefaultToolchain GCC
  }

  ExecutableConfig test_lin0 {
    Files "src/main.cpp"
    Set NOSTDLIB, cmd: "ruby ../../../../rake_helper/nostdlib.rb"
    DefaultToolchain GCC {
      Linker {
        Flags "$(NOSTDLIB) $(LINKER_WIN_FIX)"
      }
    }
  }

  ExecutableConfig test_lin1 {
    Files "src/main.cpp"
    LinkerScript "ls/linkerscript1.dld"
    Set NOSTDLIB, cmd: "ruby ../../../../rake_helper/nostdlib.rb"
    DefaultToolchain GCC {
      Linker {
        Flags "$(NOSTDLIB) $(LINKER_WIN_FIX)"
      }
    }
  }


  ExecutableConfig test_files0 {
    DefaultToolchain GCC
  }

  ExecutableConfig test_files2 {
    Files "src/main.cpp"
    Files "src/nix.cpp"
    DefaultToolchain GCC
  }

  ExecutableConfig test_exfiles0 {
    Files "src/main.cpp"
    Files "src/nix.cpp"
    Files "src/add1.cpp"
    Files "src/add2.cpp"
    DefaultToolchain GCC
  }

  ExecutableConfig test_exfiles2 {
    Files "src/main.cpp"
    Files "src/nix.cpp"
    Files "src/add1.cpp"
    Files "src/add2.cpp"
    ExcludeFiles "src/nix.cpp"
    ExcludeFiles "src/add1.cpp"
    ExcludeFiles "src/doesNotExist.cpp"
    DefaultToolchain GCC
  }

  ExecutableConfig test_inc0 {
    Files "src/main.cpp"
    DefaultToolchain GCC
  }

  ExecutableConfig test_inc2 {
    Files "src/main.cpp"
    IncludeDir "include/a"
    IncludeDir "include/b"
    DefaultToolchain GCC
  }

  ExecutableConfig test_libs0 {
    Files "src/main.cpp"
    DefaultToolchain GCC
  }

  ExecutableConfig test_libs2 {
    Files "src/main.cpp"
    ExternalLibrary "exlibA"
    ExternalLibrary "exlibB"
    ExternalLibrarySearchPath "searchPathX"
    ExternalLibrarySearchPath "searchPathY"
    UserLibrary "userlibM"
    UserLibrary "userlibN"
    DefaultToolchain GCC
  }

  CustomConfig test_steps0 {
    DefaultToolchain GCC
  }

  CustomConfig test_steps2 {
    StartupSteps {
      CommandLine "echo STARTUP1"
      CommandLine "echo STARTUP2"
    }
    PreSteps {
      CommandLine "echo PRE1"
      CommandLine "echo PRE2"
    }
    PostSteps {
      CommandLine "echo POST1"
      CommandLine "echo POST2"
    }
    ExitSteps {
      CommandLine "echo EXIT1"
      CommandLine "echo EXIT2"
    }
    CommandLine "echo STEP1"
    DefaultToolchain GCC
  }

  ExecutableConfig test_tool0 {
    Files "src/main.cpp"
    Files "src/x.c"
    Files "src/y.s"
    DefaultToolchain GCC
  }

  ExecutableConfig test_tool1 {
    Files "src/main.cpp"
    Files "src/x.c"
    Files "src/y.s"
    Toolchain
    DefaultToolchain GCC
  }

  ExecutableConfig test_tool2 {
    Files "src/main.cpp"
    Files "src/x.c"
    Files "src/y.s"
    Toolchain {
      Compiler CPP {
        Define "CPPA=1"
        Define "CPPB=2"
        Flags add: "-DCPPC=3"
        Flags add: "-DCPPD=4"
      }
      Compiler C {
        Define "CCCA=1"
        Define "CCCB=2"
        Flags add: "-DCCCC=3"
        Flags add: "-DCCCD=4"
      }
      Compiler ASM {
        Define "ASMA=1"
        Define "ASMB=2"
        Flags add: "-DASMC=3"
        Flags add: "-DASMD=4"
      }
      Linker {
        Flags add: "-LPATHA"
        Flags add: "-LPATHB"
        LibPrefixFlags add: "-LPATHC"
        LibPrefixFlags add: "-LPATHD"
        LibPostfixFlags add: "-LPATHE"
        LibPostfixFlags add: "-LPATHF"
      }
    }
    DefaultToolchain GCC
  }

  LibraryConfig test_dtool0 {
    Files "src/main.cpp"
    Files "src/x.c"
    Files "src/y.s"
  }

  LibraryConfig test_dtool1 {
    Files "src/main.cpp"
    Files "src/x.c"
    Files "src/y.s"
    DefaultToolchain GCC
  }

  LibraryConfig test_dtool2 {
    Files "src/main.cpp"
    Files "src/x.c"
    Files "src/y.s"
    DefaultToolchain GCC, outputDir: test_out_org {
      Archiver {
        Flags add: "-FLAG1"
        Flags add: "-FLAG2"
      }
      Docu "echo DOCUCMD_org"
    }
  }

  ExecutableConfig test_eclFalse {
    Files "src/main.cpp"
    Files "src/add1.cpp"
    DefaultToolchain GCC, eclipseOrder: false
  }
  ExecutableConfig test_eclTrue {
    Files "src/main.cpp"
    Files "src/add1.cpp"
    DefaultToolchain GCC, eclipseOrder: true
  }
  ExecutableConfig test_eclNone {
    Files "src/main.cpp"
    Files "src/add1.cpp"
    DefaultToolchain GCC
  }

  LibraryConfig test_scope_lib {
    Files "src/add1.cpp"
  }

  ExecutableConfig test_scope_main {
    Files "src/main.cpp"
    Dependency config: test_scope_lib
    Dependency lib1, config: test_ok
    Dependency lib1, config: test_other
    Dependency lib2, config: test_ok
    DefaultToolchain GCC
  }

  ExecutableConfig test_casca {
    Files "src/main.cpp"
    Files "src/nix.cpp"
    Dependency lib1, config: test_ok
    Dependency lib1, config: test_other
    DefaultToolchain GCC
  }

  ExecutableConfig test_multi {
    Files "src/main.cpp"
    DefaultToolchain GCC
  }

}

If os: Windows {
  ExecutableConfig __ALL__, type: extend {
    Set LINKER_WIN_FIX, value: "-Wl,--image-base -Wl,0x10000000"
  }
}
